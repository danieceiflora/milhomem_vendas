"""
Comando para migrar m√©todos de pagamento para o novo formato.
"""
from django.core.management.base import BaseCommand
from pos.models import PaymentMethod


class Command(BaseCommand):
    help = 'Atualiza m√©todos de pagamento para o novo formato (fee_payer)'

    def handle(self, *args, **options):
        self.stdout.write(self.style.WARNING('üîÑ Atualizando m√©todos de pagamento...'))
        
        # PIX - Taxa paga pelo cliente (acr√©scimo)
        pix, created = PaymentMethod.objects.get_or_create(
            name='PIX',
            defaults={
                'fee_percentage': 0,
                'fee_payer': PaymentMethod.FeePayerType.CUSTOMER,
                'is_active': True
            }
        )
        if not created:
            pix.fee_payer = PaymentMethod.FeePayerType.CUSTOMER
            pix.fee_percentage = 0  # Sem taxa
            pix.save()
        self.stdout.write(f'‚úÖ PIX: {pix.fee_payer}')
        
        # Dinheiro - Sem taxa
        dinheiro, created = PaymentMethod.objects.get_or_create(
            name='Dinheiro',
            defaults={
                'fee_percentage': 0,
                'fee_payer': PaymentMethod.FeePayerType.MERCHANT,
                'is_active': True
            }
        )
        if not created:
            dinheiro.fee_percentage = 0
            dinheiro.save()
        self.stdout.write(f'‚úÖ Dinheiro: {dinheiro.fee_payer}')
        
        # Cart√£o de D√©bito - Taxa paga pelo cliente (2%)
        debito, created = PaymentMethod.objects.get_or_create(
            name='Cart√£o de D√©bito',
            defaults={
                'fee_percentage': 2.00,
                'fee_payer': PaymentMethod.FeePayerType.CUSTOMER,
                'is_active': True
            }
        )
        if not created:
            debito.fee_percentage = 2.00
            debito.fee_payer = PaymentMethod.FeePayerType.CUSTOMER
            debito.save()
        self.stdout.write(f'‚úÖ Cart√£o de D√©bito: {debito.fee_payer} - {debito.fee_percentage}%')
        
        # Cart√£o de Cr√©dito - Taxa paga pelo cliente (3%)
        credito, created = PaymentMethod.objects.get_or_create(
            name='Cart√£o de Cr√©dito',
            defaults={
                'fee_percentage': 3.00,
                'fee_payer': PaymentMethod.FeePayerType.CUSTOMER,
                'is_active': True
            }
        )
        if not created:
            credito.fee_percentage = 3.00
            credito.fee_payer = PaymentMethod.FeePayerType.CUSTOMER
            credito.save()
        self.stdout.write(f'‚úÖ Cart√£o de Cr√©dito: {credito.fee_payer} - {credito.fee_percentage}%')
        
        self.stdout.write(self.style.SUCCESS('\nüéâ M√©todos de pagamento atualizados!'))
        self.stdout.write('\nüí° Configura√ß√£o:')
        self.stdout.write('   - Dinheiro/PIX: sem taxa')
        self.stdout.write('   - D√©bito: +2% (cliente paga)')
        self.stdout.write('   - Cr√©dito: +3% (cliente paga)')

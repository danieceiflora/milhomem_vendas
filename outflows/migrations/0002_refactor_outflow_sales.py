# Generated by hand to refactor outflows into sales with items
from __future__ import annotations
from datetime import date
from django.db import migrations, models
import django.db.models.deletion


def migrate_outflows_to_items(apps, schema_editor):
    Customer = apps.get_model('customers', 'Customer')
    Outflow = apps.get_model('outflows', 'Outflow')
    OutflowItem = apps.get_model('outflows', 'OutflowItem')
    Product = apps.get_model('products', 'Product')

    if not Outflow.objects.exists():
        return

    default_customer, _ = Customer.objects.get_or_create(
        full_name='Cliente Padrão',
        defaults={
            'date_of_birth': date(2000, 1, 1),
            'phone': '',
            'email': 'cliente.padrao@local.test',
            'address': 'Não informado',
            'cpf': '000.000.000-00',
        },
    )

    items_to_create = []

    for outflow in Outflow.objects.all():
        if outflow.customer_id is None:
            outflow.customer = default_customer
            outflow.save(update_fields=['customer'])

        product_id = getattr(outflow, 'product_id', None)
        quantity = getattr(outflow, 'quantity', None)

        if not product_id or not quantity:
            continue

        try:
            product = Product.objects.get(id=product_id)
        except Product.DoesNotExist:
            continue

        items_to_create.append(
            OutflowItem(
                outflow_id=outflow.id,
                product_id=product.id,
                quantity=quantity,
                unit_price=product.selling_price,
                unit_cost=product.cost_price,
            )
        )

    if items_to_create:
        OutflowItem.objects.bulk_create(items_to_create)


class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0001_initial'),
        ('outflows', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='outflow',
            name='customer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='outflows', to='customers.customer'),
        ),
        migrations.CreateModel(
            name='OutflowItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=20)),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('outflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='outflows.outflow')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='outflow_items', to='products.product')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.RunPython(migrate_outflows_to_items, migrations.RunPython.noop),
        migrations.AlterModelOptions(
            name='outflow',
            options={'ordering': ['-created_at']},
        ),
        migrations.AlterField(
            model_name='outflow',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='outflows', to='customers.customer'),
        ),
        migrations.RemoveField(
            model_name='outflow',
            name='product',
        ),
        migrations.RemoveField(
            model_name='outflow',
            name='quantity',
        ),
    ]
